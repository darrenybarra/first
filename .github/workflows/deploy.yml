name: Deploy Application

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    # Frontend tests
    - name: Setup Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '16'
    
    - name: Install frontend dependencies
      working-directory: frontend
      run: |
        npm ci

    - name: Run frontend tests
      working-directory: frontend
      run: npm test -- --watchAll=false

    # Backend tests
    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
    
    - name: Install backend dependencies
      working-directory: backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/dev.txt
        pip install -r requirements/base.txt
        pip install pytest

    - name: Run backend tests
      working-directory: backend
      run: pytest

  deploy:
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    # Setup credentials
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{ env.AWS_REGION }}
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}

    # Build and deploy frontend
    - name: Setup Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '16'

    - name: Build frontend
      working-directory: frontend
      run: |
        npm ci
        npm run build
      env:
        CI: true
        REACT_APP_API_URL: ${{ secrets.API_URL }}

    # Package backend
    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: Package backend
      working-directory: backend
      run: |
        mkdir -p package
        pip install -r requirements/prod.txt -t package/
        cp -r src/* package/
        cd package
        zip -r ../deployment-package.zip .

    # Deploy infrastructure
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Deploy with Terraform
      working-directory: terraform
      env:
        TF_VAR_openai_api_key: ${{ secrets.OPENAI_API_KEY }}
        TF_VAR_github_repository: ${{ github.repository }}
        AWS_DEFAULT_REGION: us-west-2
      run: |
        terraform init -backend=true
        terraform workspace select prod || terraform workspace new prod
        terraform plan -var-file="environments/prod/terraform.tfvars" -out=tfplan
        terraform apply tfplan

    # Upload frontend to S3 and invalidate CloudFront
    - name: Deploy frontend
      working-directory: terraform
      run: |
        BUCKET_NAME=$(terraform output -raw frontend_bucket)
        DISTRIBUTION_ID=$(terraform output -raw cloudfront_distribution_id)
        aws s3 sync ../frontend/build/ s3://$BUCKET_NAME/ --delete
        aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths "/*" 